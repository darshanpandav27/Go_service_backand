let Joi,User,CustomErrorHandler,bcrypt,JwtService,randomstring,sendmail;_a32‍.x([["default",()=>_a32‍.o]]);_a32‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_a32‍.w("../../models",[["User",["User"],function(v){User=v}]]);_a32‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_a32‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_a32‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_a32‍.w("randomstring",[["default",["randomstring"],function(v){randomstring=v}]]);_a32‍.w("../../services/Otpsending",[["default",["sendmail"],function(v){sendmail=v}]]);







const loginController = {
    async login(req, res, next) {
        // Validation
        const loginSchema = Joi.object({
            email: Joi.string().email().required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
        });
        const { error } = loginSchema.validate(req.body);

        if (error) {
            return res.status(500).json({
                status: false,
                massage: err
            })
        }

        try {
            const user = await User.findOne({ email: req.body.email });
            if (!user) {
                return res.status(409).json({
                    status: false,
                    massage:'Username or password is wrong!'
                })
            }
            // compare the password
            const match = await bcrypt.compare(req.body.password, user.password);
            if (!match) {
                return res.status(409).json({
                    status: false,
                    massage:'Username or password is wrong!'
                })
            }

            // Toekn
            const access_token = JwtService.sign({ _id: user._id });

        // database whitelist
        // const randomsTring = randomstring.generate({
        //     length: 6,
        //     charset: ['numeric']
        //     });
        //     console.log(randomsTring);
        //     let content = ' Hello, '+name+',\n \n'+randomsTring+'';
        //     sendmail(req.body.email,mailsubject,content);
            res.status(200).json({ status: true,user ,access_token, massage:"login successful... " });

        } catch(err) {
            return res.status(500).json({
                status: false,
                massage: err
            })
        }

    },
};


_a32‍.d(loginController);