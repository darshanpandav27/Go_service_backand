let Joi,User,CustomErrorHandler,bcrypt,JwtService;_b7b‍.x([["default",()=>_b7b‍.o]]);_b7b‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_b7b‍.w("../../models",[["User",["User"],function(v){User=v}]]);_b7b‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_b7b‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_b7b‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);





const loginController = {
    async login(req, res, next) {
        // Validation
        const loginSchema = Joi.object({
            email: Joi.string().email().required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
        });
        const { error } = loginSchema.validate(req.body);

        if (error) {
            return next(error);
        }

        try {
            const user = await User.findOne({ email: req.body.email });
            if (!user) {
                return next(CustomErrorHandler.wrongCredentials());
            }
            // compare the password
            const match = await bcrypt.compare(req.body.password, user.password);
            if (!match) {
                return next(CustomErrorHandler.wrongCredentials());
            }

            // Toekn
            const access_token = JwtService.sign({ _id: user._id, role: user.role });

        // database whitelist

            res.json({ access_token });

        } catch(err) {
            return next(err);
        }

    },
};


_b7b‍.d(loginController);