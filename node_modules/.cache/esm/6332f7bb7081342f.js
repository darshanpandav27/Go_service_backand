let Joi,User,bcrypt,JwtService,CustomErrorHandler;_708‍.x([["default",()=>_708‍.o]]);_708‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_708‍.w("../../models",[["User",["User"],function(v){User=v}]]);_708‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_708‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_708‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);





const registerController = {
    async register(req, res, next) {

        const registerSchema = Joi.object({
            name: Joi.string().min(3).max(30).required(),
            email: Joi.string().email().required(),
            phone_numbar: Joi.string().min(10).required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
            repeat_password: Joi.ref('password')
        });

        _708‍.g.console.log(req.body);

        const { error } = registerSchema.validate(req.body);
        
        if (error) {
            return next(error);
        }

        try {
            const exist = await User.exists({ email: req.body.email });
            if (exist) {
                return next(CustomErrorHandler.alreadyExist('This email is already taken.'));
            }
        } catch(err) {
            return next(err);
        }

        try {
            const exist = await User.exists({ phone_numbar: req.body.phone_numbar });
            if (exist) {
                return next(CustomErrorHandler.alreadyExist('This phone numbar is already taken.'));
            }
        } catch(err) {
            return next(err);
        }

        const { name, email, phone_numbar ,password } = req.body;

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // prepare the model

    const user = new User({
        name,
        email,
        phone_numbar,
        password: hashedPassword
    });

    let access_token;

    try {
        const result = await user.save();
        _708‍.g.console.log(result);

        // Token
        access_token = JwtService.sign({ _id: result._id, role: result.role });
        // database whitelist
    } catch(err) {
        return next(err);
    }

    res.json({ access_token });

    }
}


_708‍.d(registerController);